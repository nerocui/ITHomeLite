//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace App1
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::App1.App1_XamlTypeInfo.XamlMetaDataProvider __appProvider;
        private global::App1.App1_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::App1.App1_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace App1.App1_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::App1.App1_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::App1.App1_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[44];
            _typeNameTable[0] = "App1.Article";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[2] = "String";
            _typeNameTable[3] = "App1.BackupPage";
            _typeNameTable[4] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[5] = "App1.DefenderPage";
            _typeNameTable[6] = "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel";
            _typeNameTable[7] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[8] = "Double";
            _typeNameTable[9] = "Windows.UI.Color";
            _typeNameTable[10] = "System.ValueType";
            _typeNameTable[11] = "Object";
            _typeNameTable[12] = "Windows.UI.Composition.DropShadow";
            _typeNameTable[13] = "Windows.UI.Composition.CompositionShadow";
            _typeNameTable[14] = "Windows.UI.Composition.CompositionObject";
            _typeNameTable[15] = "Windows.UI.Composition.CompositionBrush";
            _typeNameTable[16] = "LottieUWP.LottieAnimationView";
            _typeNameTable[17] = "Int32";
            _typeNameTable[18] = "Boolean";
            _typeNameTable[19] = "LottieUWP.RepeatMode";
            _typeNameTable[20] = "System.Enum";
            _typeNameTable[21] = "LottieUWP.LottieAnimationView.CacheStrategy";
            _typeNameTable[22] = "LottieUWP.FontAssetDelegate";
            _typeNameTable[23] = "LottieUWP.TextDelegate";
            _typeNameTable[24] = "LottieUWP.LottieDrawable";
            _typeNameTable[25] = "LottieUWP.LottieComposition";
            _typeNameTable[26] = "Single";
            _typeNameTable[27] = "LottieUWP.IImageAssetDelegate";
            _typeNameTable[28] = "Int64";
            _typeNameTable[29] = "LottieUWP.PerformanceTracker";
            _typeNameTable[30] = "App1.MainPage";
            _typeNameTable[31] = "App1.SettingsPage";
            _typeNameTable[32] = "App1.TroubleshootPage";
            _typeNameTable[33] = "Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView";
            _typeNameTable[34] = "Windows.UI.Xaml.Controls.GridView";
            _typeNameTable[35] = "Windows.UI.Xaml.Controls.ItemsControl";
            _typeNameTable[36] = "System.Windows.Input.ICommand";
            _typeNameTable[37] = "Windows.UI.Xaml.Controls.ItemsPanelTemplate";
            _typeNameTable[38] = "App1.UpdatePage";
            _typeNameTable[39] = "System.Collections.ObjectModel.ObservableCollection`1<App1.Models.News>";
            _typeNameTable[40] = "System.Collections.ObjectModel.Collection`1<App1.Models.News>";
            _typeNameTable[41] = "App1.Models.News";
            _typeNameTable[42] = "Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions";
            _typeNameTable[43] = "Windows.UI.Xaml.Controls.NavigationView";

            _typeTable = new global::System.Type[44];
            _typeTable[0] = typeof(global::App1.Article);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[2] = typeof(global::System.String);
            _typeTable[3] = typeof(global::App1.BackupPage);
            _typeTable[4] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[5] = typeof(global::App1.DefenderPage);
            _typeTable[6] = typeof(global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel);
            _typeTable[7] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[8] = typeof(global::System.Double);
            _typeTable[9] = typeof(global::Windows.UI.Color);
            _typeTable[10] = typeof(global::System.ValueType);
            _typeTable[11] = typeof(global::System.Object);
            _typeTable[12] = typeof(global::Windows.UI.Composition.DropShadow);
            _typeTable[13] = typeof(global::Windows.UI.Composition.CompositionShadow);
            _typeTable[14] = typeof(global::Windows.UI.Composition.CompositionObject);
            _typeTable[15] = typeof(global::Windows.UI.Composition.CompositionBrush);
            _typeTable[16] = typeof(global::LottieUWP.LottieAnimationView);
            _typeTable[17] = typeof(global::System.Int32);
            _typeTable[18] = typeof(global::System.Boolean);
            _typeTable[19] = typeof(global::LottieUWP.RepeatMode);
            _typeTable[20] = typeof(global::System.Enum);
            _typeTable[21] = typeof(global::LottieUWP.LottieAnimationView.CacheStrategy);
            _typeTable[22] = typeof(global::LottieUWP.FontAssetDelegate);
            _typeTable[23] = typeof(global::LottieUWP.TextDelegate);
            _typeTable[24] = typeof(global::LottieUWP.LottieDrawable);
            _typeTable[25] = typeof(global::LottieUWP.LottieComposition);
            _typeTable[26] = typeof(global::System.Single);
            _typeTable[27] = typeof(global::LottieUWP.IImageAssetDelegate);
            _typeTable[28] = typeof(global::System.Int64);
            _typeTable[29] = typeof(global::LottieUWP.PerformanceTracker);
            _typeTable[30] = typeof(global::App1.MainPage);
            _typeTable[31] = typeof(global::App1.SettingsPage);
            _typeTable[32] = typeof(global::App1.TroubleshootPage);
            _typeTable[33] = typeof(global::Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView);
            _typeTable[34] = typeof(global::Windows.UI.Xaml.Controls.GridView);
            _typeTable[35] = typeof(global::Windows.UI.Xaml.Controls.ItemsControl);
            _typeTable[36] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[37] = typeof(global::Windows.UI.Xaml.Controls.ItemsPanelTemplate);
            _typeTable[38] = typeof(global::App1.UpdatePage);
            _typeTable[39] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::App1.Models.News>);
            _typeTable[40] = typeof(global::System.Collections.ObjectModel.Collection<global::App1.Models.News>);
            _typeTable[41] = typeof(global::App1.Models.News);
            _typeTable[42] = typeof(global::Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions);
            _typeTable[43] = typeof(global::Windows.UI.Xaml.Controls.NavigationView);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_Article() { return new global::App1.Article(); }
        private object Activate_3_BackupPage() { return new global::App1.BackupPage(); }
        private object Activate_5_DefenderPage() { return new global::App1.DefenderPage(); }
        private object Activate_6_DropShadowPanel() { return new global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel(); }
        private object Activate_16_LottieAnimationView() { return new global::LottieUWP.LottieAnimationView(); }
        private object Activate_22_FontAssetDelegate() { return new global::LottieUWP.FontAssetDelegate(); }
        private object Activate_24_LottieDrawable() { return new global::LottieUWP.LottieDrawable(); }
        private object Activate_25_LottieComposition() { return new global::LottieUWP.LottieComposition(); }
        private object Activate_29_PerformanceTracker() { return new global::LottieUWP.PerformanceTracker(); }
        private object Activate_30_MainPage() { return new global::App1.MainPage(); }
        private object Activate_31_SettingsPage() { return new global::App1.SettingsPage(); }
        private object Activate_32_TroubleshootPage() { return new global::App1.TroubleshootPage(); }
        private object Activate_33_AdaptiveGridView() { return new global::Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView(); }
        private object Activate_38_UpdatePage() { return new global::App1.UpdatePage(); }
        private object Activate_39_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::App1.Models.News>(); }
        private object Activate_40_Collection() { return new global::System.Collections.ObjectModel.Collection<global::App1.Models.News>(); }
        private object Activate_42_NavigationViewExtensions() { return new global::Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions(); }
        private void VectorAdd_39_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::App1.Models.News>)instance;
            var newItem = (global::App1.Models.News)item;
            collection.Add(newItem);
        }
        private void VectorAdd_40_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::App1.Models.News>)instance;
            var newItem = (global::App1.Models.News)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::App1.App1_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::App1.App1_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  App1.Article
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_Article;
                userType.AddMemberName("Pic");
                userType.AddMemberName("Label");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  String
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  App1.BackupPage
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_3_BackupPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  App1.DefenderPage
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_5_DefenderPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_6_DropShadowPanel;
                userType.AddMemberName("BlurRadius");
                userType.AddMemberName("ShadowOpacity");
                userType.AddMemberName("OffsetX");
                userType.AddMemberName("OffsetY");
                userType.AddMemberName("Color");
                userType.AddMemberName("DropShadow");
                userType.AddMemberName("Mask");
                userType.AddMemberName("OffsetZ");
                xamlType = userType;
                break;

            case 7:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Double
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Windows.UI.Color
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 10:   //  System.ValueType
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 11:   //  Object
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Windows.UI.Composition.DropShadow
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Composition.CompositionShadow"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 13:   //  Windows.UI.Composition.CompositionShadow
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Composition.CompositionObject"));
                xamlType = userType;
                break;

            case 14:   //  Windows.UI.Composition.CompositionObject
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 15:   //  Windows.UI.Composition.CompositionBrush
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Composition.CompositionObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 16:   //  LottieUWP.LottieAnimationView
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_16_LottieAnimationView;
                userType.AddMemberName("FileName");
                userType.AddMemberName("RepeatCount");
                userType.AddMemberName("AutoPlay");
                userType.AddMemberName("RepeatMode");
                userType.AddMemberName("DefaultCacheStrategy");
                userType.AddMemberName("ImageAssetsFolder");
                userType.AddMemberName("ColorFilter");
                userType.AddMemberName("FontAssetDelegate");
                userType.AddMemberName("TextDelegate");
                userType.AddMemberName("Scale");
                userType.AddMemberName("ImageDrawable");
                userType.AddMemberName("Composition");
                userType.AddMemberName("MinFrame");
                userType.AddMemberName("MinProgress");
                userType.AddMemberName("MaxFrame");
                userType.AddMemberName("MaxProgress");
                userType.AddMemberName("Speed");
                userType.AddMemberName("Loop");
                userType.AddMemberName("FrameRate");
                userType.AddMemberName("IsAnimating");
                userType.AddMemberName("ImageAssetDelegate");
                userType.AddMemberName("Frame");
                userType.AddMemberName("Progress");
                userType.AddMemberName("Duration");
                userType.AddMemberName("PerformanceTrackingEnabled");
                userType.AddMemberName("PerformanceTracker");
                xamlType = userType;
                break;

            case 17:   //  Int32
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Boolean
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  LottieUWP.RepeatMode
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Restart", global::LottieUWP.RepeatMode.Restart);
                userType.AddEnumValue("Reverse", global::LottieUWP.RepeatMode.Reverse);
                xamlType = userType;
                break;

            case 20:   //  System.Enum
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 21:   //  LottieUWP.LottieAnimationView.CacheStrategy
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::LottieUWP.LottieAnimationView.CacheStrategy.None);
                userType.AddEnumValue("Weak", global::LottieUWP.LottieAnimationView.CacheStrategy.Weak);
                userType.AddEnumValue("Strong", global::LottieUWP.LottieAnimationView.CacheStrategy.Strong);
                xamlType = userType;
                break;

            case 22:   //  LottieUWP.FontAssetDelegate
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  LottieUWP.TextDelegate
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 24:   //  LottieUWP.LottieDrawable
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  LottieUWP.LottieComposition
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 26:   //  Single
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  LottieUWP.IImageAssetDelegate
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 28:   //  Int64
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  LottieUWP.PerformanceTracker
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 30:   //  App1.MainPage
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_30_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  App1.SettingsPage
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_31_SettingsPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  App1.TroubleshootPage
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_TroubleshootPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.GridView"));
                userType.Activator = Activate_33_AdaptiveGridView;
                userType.AddMemberName("OneRowModeEnabled");
                userType.AddMemberName("ItemHeight");
                userType.AddMemberName("DesiredWidth");
                userType.AddMemberName("StretchContentForSingleRow");
                userType.AddMemberName("ItemClickCommand");
                userType.AddMemberName("ItemsPanel");
                xamlType = userType;
                break;

            case 34:   //  Windows.UI.Xaml.Controls.GridView
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 35:   //  Windows.UI.Xaml.Controls.ItemsControl
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 36:   //  System.Windows.Input.ICommand
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 37:   //  Windows.UI.Xaml.Controls.ItemsPanelTemplate
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 38:   //  App1.UpdatePage
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_38_UpdatePage;
                userType.AddMemberName("NewsList");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  System.Collections.ObjectModel.ObservableCollection`1<App1.Models.News>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<App1.Models.News>"));
                userType.CollectionAdd = VectorAdd_39_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 40:   //  System.Collections.ObjectModel.Collection`1<App1.Models.News>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_40_Collection;
                userType.CollectionAdd = VectorAdd_40_Collection;
                xamlType = userType;
                break;

            case 41:   //  App1.Models.News
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("_title");
                userType.AddMemberName("_link");
                userType.AddMemberName("_time");
                userType.AddMemberName("_description");
                userType.AddMemberName("_first_pic_url");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_42_NavigationViewExtensions;
                userType.AddMemberName("SelectedIndex");
                userType.AddMemberName("CollapseOnClick");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 43:   //  Windows.UI.Xaml.Controls.NavigationView
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Microsoft.Toolkit.Uwp.UI.Microsoft_Toolkit_Uwp_UI_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_Article_Pic(object instance)
        {
            var that = (global::App1.Article)instance;
            return that.Pic;
        }
        private void set_0_Article_Pic(object instance, object Value)
        {
            var that = (global::App1.Article)instance;
            that.Pic = (global::System.String)Value;
        }
        private object get_1_Article_Label(object instance)
        {
            var that = (global::App1.Article)instance;
            return that.Label;
        }
        private void set_1_Article_Label(object instance, object Value)
        {
            var that = (global::App1.Article)instance;
            that.Label = (global::System.String)Value;
        }
        private object get_2_DropShadowPanel_BlurRadius(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            return that.BlurRadius;
        }
        private void set_2_DropShadowPanel_BlurRadius(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            that.BlurRadius = (global::System.Double)Value;
        }
        private object get_3_DropShadowPanel_ShadowOpacity(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            return that.ShadowOpacity;
        }
        private void set_3_DropShadowPanel_ShadowOpacity(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            that.ShadowOpacity = (global::System.Double)Value;
        }
        private object get_4_DropShadowPanel_OffsetX(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            return that.OffsetX;
        }
        private void set_4_DropShadowPanel_OffsetX(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            that.OffsetX = (global::System.Double)Value;
        }
        private object get_5_DropShadowPanel_OffsetY(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            return that.OffsetY;
        }
        private void set_5_DropShadowPanel_OffsetY(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            that.OffsetY = (global::System.Double)Value;
        }
        private object get_6_DropShadowPanel_Color(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            return that.Color;
        }
        private void set_6_DropShadowPanel_Color(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_7_DropShadowPanel_DropShadow(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            return that.DropShadow;
        }
        private object get_8_DropShadowPanel_Mask(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            return that.Mask;
        }
        private void set_8_DropShadowPanel_Mask(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            that.Mask = (global::Windows.UI.Composition.CompositionBrush)Value;
        }
        private object get_9_DropShadowPanel_OffsetZ(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            return that.OffsetZ;
        }
        private void set_9_DropShadowPanel_OffsetZ(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            that.OffsetZ = (global::System.Double)Value;
        }
        private object get_10_LottieAnimationView_FileName(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.FileName;
        }
        private void set_10_LottieAnimationView_FileName(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.FileName = (global::System.String)Value;
        }
        private object get_11_LottieAnimationView_RepeatCount(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.RepeatCount;
        }
        private void set_11_LottieAnimationView_RepeatCount(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.RepeatCount = (global::System.Int32)Value;
        }
        private object get_12_LottieAnimationView_AutoPlay(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.AutoPlay;
        }
        private void set_12_LottieAnimationView_AutoPlay(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.AutoPlay = (global::System.Boolean)Value;
        }
        private object get_13_LottieAnimationView_RepeatMode(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.RepeatMode;
        }
        private void set_13_LottieAnimationView_RepeatMode(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.RepeatMode = (global::LottieUWP.RepeatMode)Value;
        }
        private object get_14_LottieAnimationView_DefaultCacheStrategy(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.DefaultCacheStrategy;
        }
        private void set_14_LottieAnimationView_DefaultCacheStrategy(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.DefaultCacheStrategy = (global::LottieUWP.LottieAnimationView.CacheStrategy)Value;
        }
        private object get_15_LottieAnimationView_ImageAssetsFolder(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.ImageAssetsFolder;
        }
        private void set_15_LottieAnimationView_ImageAssetsFolder(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.ImageAssetsFolder = (global::System.String)Value;
        }
        private object get_16_LottieAnimationView_ColorFilter(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.ColorFilter;
        }
        private void set_16_LottieAnimationView_ColorFilter(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.ColorFilter = (global::Windows.UI.Color)Value;
        }
        private void set_17_LottieAnimationView_FontAssetDelegate(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.FontAssetDelegate = (global::LottieUWP.FontAssetDelegate)Value;
        }
        private void set_18_LottieAnimationView_TextDelegate(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.TextDelegate = (global::LottieUWP.TextDelegate)Value;
        }
        private object get_19_LottieAnimationView_Scale(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.Scale;
        }
        private void set_19_LottieAnimationView_Scale(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.Scale = (global::System.Double)Value;
        }
        private void set_20_LottieAnimationView_ImageDrawable(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.ImageDrawable = (global::LottieUWP.LottieDrawable)Value;
        }
        private object get_21_LottieAnimationView_Composition(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.Composition;
        }
        private void set_21_LottieAnimationView_Composition(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.Composition = (global::LottieUWP.LottieComposition)Value;
        }
        private object get_22_LottieAnimationView_MinFrame(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.MinFrame;
        }
        private void set_22_LottieAnimationView_MinFrame(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.MinFrame = (global::System.Single)Value;
        }
        private void set_23_LottieAnimationView_MinProgress(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.MinProgress = (global::System.Single)Value;
        }
        private object get_24_LottieAnimationView_MaxFrame(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.MaxFrame;
        }
        private void set_24_LottieAnimationView_MaxFrame(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.MaxFrame = (global::System.Single)Value;
        }
        private void set_25_LottieAnimationView_MaxProgress(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.MaxProgress = (global::System.Single)Value;
        }
        private object get_26_LottieAnimationView_Speed(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.Speed;
        }
        private void set_26_LottieAnimationView_Speed(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.Speed = (global::System.Double)Value;
        }
#pragma warning disable 0618  //   Warning on Deprecated usage
        private object get_27_LottieAnimationView_Loop(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.Loop;
        }
        private void set_27_LottieAnimationView_Loop(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.Loop = (global::System.Boolean)Value;
        }
#pragma warning restore 0618
        private object get_28_LottieAnimationView_FrameRate(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.FrameRate;
        }
        private void set_28_LottieAnimationView_FrameRate(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.FrameRate = (global::System.Double)Value;
        }
        private object get_29_LottieAnimationView_IsAnimating(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.IsAnimating;
        }
        private void set_30_LottieAnimationView_ImageAssetDelegate(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.ImageAssetDelegate = (global::LottieUWP.IImageAssetDelegate)Value;
        }
        private object get_31_LottieAnimationView_Frame(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.Frame;
        }
        private void set_31_LottieAnimationView_Frame(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.Frame = (global::System.Single)Value;
        }
        private object get_32_LottieAnimationView_Progress(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.Progress;
        }
        private void set_32_LottieAnimationView_Progress(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.Progress = (global::System.Single)Value;
        }
        private object get_33_LottieAnimationView_Duration(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.Duration;
        }
        private void set_34_LottieAnimationView_PerformanceTrackingEnabled(object instance, object Value)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            that.PerformanceTrackingEnabled = (global::System.Boolean)Value;
        }
        private object get_35_LottieAnimationView_PerformanceTracker(object instance)
        {
            var that = (global::LottieUWP.LottieAnimationView)instance;
            return that.PerformanceTracker;
        }
        private object get_36_AdaptiveGridView_OneRowModeEnabled(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView)instance;
            return that.OneRowModeEnabled;
        }
        private void set_36_AdaptiveGridView_OneRowModeEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView)instance;
            that.OneRowModeEnabled = (global::System.Boolean)Value;
        }
        private object get_37_AdaptiveGridView_ItemHeight(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView)instance;
            return that.ItemHeight;
        }
        private void set_37_AdaptiveGridView_ItemHeight(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView)instance;
            that.ItemHeight = (global::System.Double)Value;
        }
        private object get_38_AdaptiveGridView_DesiredWidth(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView)instance;
            return that.DesiredWidth;
        }
        private void set_38_AdaptiveGridView_DesiredWidth(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView)instance;
            that.DesiredWidth = (global::System.Double)Value;
        }
        private object get_39_AdaptiveGridView_StretchContentForSingleRow(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView)instance;
            return that.StretchContentForSingleRow;
        }
        private void set_39_AdaptiveGridView_StretchContentForSingleRow(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView)instance;
            that.StretchContentForSingleRow = (global::System.Boolean)Value;
        }
        private object get_40_AdaptiveGridView_ItemClickCommand(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView)instance;
            return that.ItemClickCommand;
        }
        private void set_40_AdaptiveGridView_ItemClickCommand(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView)instance;
            that.ItemClickCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_41_AdaptiveGridView_ItemsPanel(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView)instance;
            return that.ItemsPanel;
        }
        private object get_42_UpdatePage_NewsList(object instance)
        {
            var that = (global::App1.UpdatePage)instance;
            return that.NewsList;
        }
        private void set_42_UpdatePage_NewsList(object instance, object Value)
        {
            var that = (global::App1.UpdatePage)instance;
            that.NewsList = (global::System.Collections.ObjectModel.ObservableCollection<global::App1.Models.News>)Value;
        }
        private object get_43_News__title(object instance)
        {
            var that = (global::App1.Models.News)instance;
            return that._title;
        }
        private void set_43_News__title(object instance, object Value)
        {
            var that = (global::App1.Models.News)instance;
            that._title = (global::System.String)Value;
        }
        private object get_44_News__link(object instance)
        {
            var that = (global::App1.Models.News)instance;
            return that._link;
        }
        private void set_44_News__link(object instance, object Value)
        {
            var that = (global::App1.Models.News)instance;
            that._link = (global::System.String)Value;
        }
        private object get_45_News__time(object instance)
        {
            var that = (global::App1.Models.News)instance;
            return that._time;
        }
        private void set_45_News__time(object instance, object Value)
        {
            var that = (global::App1.Models.News)instance;
            that._time = (global::System.String)Value;
        }
        private object get_46_News__description(object instance)
        {
            var that = (global::App1.Models.News)instance;
            return that._description;
        }
        private void set_46_News__description(object instance, object Value)
        {
            var that = (global::App1.Models.News)instance;
            that._description = (global::System.String)Value;
        }
        private object get_47_News__first_pic_url(object instance)
        {
            var that = (global::App1.Models.News)instance;
            return that._first_pic_url;
        }
        private void set_47_News__first_pic_url(object instance, object Value)
        {
            var that = (global::App1.Models.News)instance;
            that._first_pic_url = (global::System.String)Value;
        }
        private object get_48_NavigationViewExtensions_SelectedIndex(object instance)
        {
            return global::Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions.GetSelectedIndex((global::Windows.UI.Xaml.Controls.NavigationView)instance);
        }
        private void set_48_NavigationViewExtensions_SelectedIndex(object instance, object Value)
        {
            global::Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions.SetSelectedIndex((global::Windows.UI.Xaml.Controls.NavigationView)instance, (global::System.Int32)Value);
        }
        private object get_49_NavigationViewExtensions_CollapseOnClick(object instance)
        {
            return global::Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions.GetCollapseOnClick((global::Windows.UI.Xaml.Controls.NavigationView)instance);
        }
        private void set_49_NavigationViewExtensions_CollapseOnClick(object instance, object Value)
        {
            global::Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions.SetCollapseOnClick((global::Windows.UI.Xaml.Controls.NavigationView)instance, (global::System.Boolean)Value);
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::App1.App1_XamlTypeInfo.XamlMember xamlMember = null;
            global::App1.App1_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "App1.Article.Pic":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Article");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Pic", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_Article_Pic;
                xamlMember.Setter = set_0_Article_Pic;
                break;
            case "App1.Article.Label":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Article");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Label", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_Article_Label;
                xamlMember.Setter = set_1_Article_Label;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel.BlurRadius":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "BlurRadius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_DropShadowPanel_BlurRadius;
                xamlMember.Setter = set_2_DropShadowPanel_BlurRadius;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel.ShadowOpacity":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ShadowOpacity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_DropShadowPanel_ShadowOpacity;
                xamlMember.Setter = set_3_DropShadowPanel_ShadowOpacity;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel.OffsetX":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OffsetX", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_DropShadowPanel_OffsetX;
                xamlMember.Setter = set_4_DropShadowPanel_OffsetX;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel.OffsetY":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OffsetY", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_DropShadowPanel_OffsetY;
                xamlMember.Setter = set_5_DropShadowPanel_OffsetY;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel.Color":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_DropShadowPanel_Color;
                xamlMember.Setter = set_6_DropShadowPanel_Color;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel.DropShadow":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "DropShadow", "Windows.UI.Composition.DropShadow");
                xamlMember.Getter = get_7_DropShadowPanel_DropShadow;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel.Mask":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Mask", "Windows.UI.Composition.CompositionBrush");
                xamlMember.Getter = get_8_DropShadowPanel_Mask;
                xamlMember.Setter = set_8_DropShadowPanel_Mask;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel.OffsetZ":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OffsetZ", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_DropShadowPanel_OffsetZ;
                xamlMember.Setter = set_9_DropShadowPanel_OffsetZ;
                break;
            case "LottieUWP.LottieAnimationView.FileName":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "FileName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_LottieAnimationView_FileName;
                xamlMember.Setter = set_10_LottieAnimationView_FileName;
                break;
            case "LottieUWP.LottieAnimationView.RepeatCount":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RepeatCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_LottieAnimationView_RepeatCount;
                xamlMember.Setter = set_11_LottieAnimationView_RepeatCount;
                break;
            case "LottieUWP.LottieAnimationView.AutoPlay":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "AutoPlay", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_LottieAnimationView_AutoPlay;
                xamlMember.Setter = set_12_LottieAnimationView_AutoPlay;
                break;
            case "LottieUWP.LottieAnimationView.RepeatMode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RepeatMode", "LottieUWP.RepeatMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_LottieAnimationView_RepeatMode;
                xamlMember.Setter = set_13_LottieAnimationView_RepeatMode;
                break;
            case "LottieUWP.LottieAnimationView.DefaultCacheStrategy":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "DefaultCacheStrategy", "LottieUWP.LottieAnimationView.CacheStrategy");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_LottieAnimationView_DefaultCacheStrategy;
                xamlMember.Setter = set_14_LottieAnimationView_DefaultCacheStrategy;
                break;
            case "LottieUWP.LottieAnimationView.ImageAssetsFolder":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ImageAssetsFolder", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_LottieAnimationView_ImageAssetsFolder;
                xamlMember.Setter = set_15_LottieAnimationView_ImageAssetsFolder;
                break;
            case "LottieUWP.LottieAnimationView.ColorFilter":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ColorFilter", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_LottieAnimationView_ColorFilter;
                xamlMember.Setter = set_16_LottieAnimationView_ColorFilter;
                break;
            case "LottieUWP.LottieAnimationView.FontAssetDelegate":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "FontAssetDelegate", "LottieUWP.FontAssetDelegate");
                xamlMember.Setter = set_17_LottieAnimationView_FontAssetDelegate;
                break;
            case "LottieUWP.LottieAnimationView.TextDelegate":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "TextDelegate", "LottieUWP.TextDelegate");
                xamlMember.Setter = set_18_LottieAnimationView_TextDelegate;
                break;
            case "LottieUWP.LottieAnimationView.Scale":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Scale", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_LottieAnimationView_Scale;
                xamlMember.Setter = set_19_LottieAnimationView_Scale;
                break;
            case "LottieUWP.LottieAnimationView.ImageDrawable":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ImageDrawable", "LottieUWP.LottieDrawable");
                xamlMember.Setter = set_20_LottieAnimationView_ImageDrawable;
                break;
            case "LottieUWP.LottieAnimationView.Composition":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Composition", "LottieUWP.LottieComposition");
                xamlMember.Getter = get_21_LottieAnimationView_Composition;
                xamlMember.Setter = set_21_LottieAnimationView_Composition;
                break;
            case "LottieUWP.LottieAnimationView.MinFrame":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MinFrame", "Single");
                xamlMember.Getter = get_22_LottieAnimationView_MinFrame;
                xamlMember.Setter = set_22_LottieAnimationView_MinFrame;
                break;
            case "LottieUWP.LottieAnimationView.MinProgress":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MinProgress", "Single");
                xamlMember.Setter = set_23_LottieAnimationView_MinProgress;
                break;
            case "LottieUWP.LottieAnimationView.MaxFrame":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MaxFrame", "Single");
                xamlMember.Getter = get_24_LottieAnimationView_MaxFrame;
                xamlMember.Setter = set_24_LottieAnimationView_MaxFrame;
                break;
            case "LottieUWP.LottieAnimationView.MaxProgress":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MaxProgress", "Single");
                xamlMember.Setter = set_25_LottieAnimationView_MaxProgress;
                break;
            case "LottieUWP.LottieAnimationView.Speed":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Speed", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_LottieAnimationView_Speed;
                xamlMember.Setter = set_26_LottieAnimationView_Speed;
                break;
            case "LottieUWP.LottieAnimationView.Loop":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Loop", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_LottieAnimationView_Loop;
                xamlMember.Setter = set_27_LottieAnimationView_Loop;
                break;
            case "LottieUWP.LottieAnimationView.FrameRate":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "FrameRate", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_LottieAnimationView_FrameRate;
                xamlMember.Setter = set_28_LottieAnimationView_FrameRate;
                break;
            case "LottieUWP.LottieAnimationView.IsAnimating":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsAnimating", "Boolean");
                xamlMember.Getter = get_29_LottieAnimationView_IsAnimating;
                xamlMember.SetIsReadOnly();
                break;
            case "LottieUWP.LottieAnimationView.ImageAssetDelegate":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ImageAssetDelegate", "LottieUWP.IImageAssetDelegate");
                xamlMember.Setter = set_30_LottieAnimationView_ImageAssetDelegate;
                break;
            case "LottieUWP.LottieAnimationView.Frame":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Frame", "Single");
                xamlMember.Getter = get_31_LottieAnimationView_Frame;
                xamlMember.Setter = set_31_LottieAnimationView_Frame;
                break;
            case "LottieUWP.LottieAnimationView.Progress":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Progress", "Single");
                xamlMember.Getter = get_32_LottieAnimationView_Progress;
                xamlMember.Setter = set_32_LottieAnimationView_Progress;
                break;
            case "LottieUWP.LottieAnimationView.Duration":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Duration", "Int64");
                xamlMember.Getter = get_33_LottieAnimationView_Duration;
                xamlMember.SetIsReadOnly();
                break;
            case "LottieUWP.LottieAnimationView.PerformanceTrackingEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PerformanceTrackingEnabled", "Boolean");
                xamlMember.Setter = set_34_LottieAnimationView_PerformanceTrackingEnabled;
                break;
            case "LottieUWP.LottieAnimationView.PerformanceTracker":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LottieUWP.LottieAnimationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PerformanceTracker", "LottieUWP.PerformanceTracker");
                xamlMember.Getter = get_35_LottieAnimationView_PerformanceTracker;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView.OneRowModeEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OneRowModeEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_AdaptiveGridView_OneRowModeEnabled;
                xamlMember.Setter = set_36_AdaptiveGridView_OneRowModeEnabled;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView.ItemHeight":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ItemHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_AdaptiveGridView_ItemHeight;
                xamlMember.Setter = set_37_AdaptiveGridView_ItemHeight;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView.DesiredWidth":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "DesiredWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_AdaptiveGridView_DesiredWidth;
                xamlMember.Setter = set_38_AdaptiveGridView_DesiredWidth;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView.StretchContentForSingleRow":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "StretchContentForSingleRow", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_AdaptiveGridView_StretchContentForSingleRow;
                xamlMember.Setter = set_39_AdaptiveGridView_StretchContentForSingleRow;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView.ItemClickCommand":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ItemClickCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_AdaptiveGridView_ItemClickCommand;
                xamlMember.Setter = set_40_AdaptiveGridView_ItemClickCommand;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView.ItemsPanel":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.AdaptiveGridView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ItemsPanel", "Windows.UI.Xaml.Controls.ItemsPanelTemplate");
                xamlMember.Getter = get_41_AdaptiveGridView_ItemsPanel;
                xamlMember.SetIsReadOnly();
                break;
            case "App1.UpdatePage.NewsList":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.UpdatePage");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "NewsList", "System.Collections.ObjectModel.ObservableCollection`1<App1.Models.News>");
                xamlMember.Getter = get_42_UpdatePage_NewsList;
                xamlMember.Setter = set_42_UpdatePage_NewsList;
                break;
            case "App1.Models.News._title":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Models.News");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "_title", "String");
                xamlMember.Getter = get_43_News__title;
                xamlMember.Setter = set_43_News__title;
                break;
            case "App1.Models.News._link":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Models.News");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "_link", "String");
                xamlMember.Getter = get_44_News__link;
                xamlMember.Setter = set_44_News__link;
                break;
            case "App1.Models.News._time":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Models.News");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "_time", "String");
                xamlMember.Getter = get_45_News__time;
                xamlMember.Setter = set_45_News__time;
                break;
            case "App1.Models.News._description":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Models.News");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "_description", "String");
                xamlMember.Getter = get_46_News__description;
                xamlMember.Setter = set_46_News__description;
                break;
            case "App1.Models.News._first_pic_url":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Models.News");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "_first_pic_url", "String");
                xamlMember.Getter = get_47_News__first_pic_url;
                xamlMember.Setter = set_47_News__first_pic_url;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions.SelectedIndex":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "SelectedIndex", "Int32");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.Controls.NavigationView");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_48_NavigationViewExtensions_SelectedIndex;
                xamlMember.Setter = set_48_NavigationViewExtensions_SelectedIndex;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions.CollapseOnClick":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CollapseOnClick", "Boolean");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.Controls.NavigationView");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_49_NavigationViewExtensions_CollapseOnClick;
                xamlMember.Setter = set_49_NavigationViewExtensions_CollapseOnClick;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::App1.App1_XamlTypeInfo.XamlSystemBaseType
    {
        global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

